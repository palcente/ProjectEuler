package com.labuda.mateusz;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors? * */

public class App {
	
	public static void main(String[] args) {
		long currentTriangleNumber=0;
		mainloop:
		for(long n=0;;n++){
			currentTriangleNumber = currentTriangleNumber+n;
			long numberOfFactors = divisors(currentTriangleNumber);
			if(numberOfFactors>500){
				System.out.println(currentTriangleNumber);
				break mainloop;
			}
		}
	}
	
	public static long divisors(long x) {
	    long limit = x;
	    long numberOfDivisors = 0;

	    for (int i = 1; i < limit; ++i) {
	        if (x % i == 0) {
	            limit = x / i;
	            if (limit != i) {
	                numberOfDivisors++;
	            }
	            numberOfDivisors++;
	        }
	    }

	    return numberOfDivisors;
	}
}
